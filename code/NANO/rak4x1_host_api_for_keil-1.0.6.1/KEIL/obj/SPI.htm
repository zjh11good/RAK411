<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\SPI.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\SPI.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Wed Mar 01 16:15:27 2017
<BR><P>
<H3>Maximum Stack Usage =       1564 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; rak_send_data &rArr; send_data &rArr; RAK_SendCMD &rArr; spi_send_head
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[32]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[28]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[28]">ADC_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[b]">BOD_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[29]">DAC_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[d]">EINT0_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[e]">EINT1_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[f]">GPABC_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[10]">GPDEF_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[1c]">HIRC_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[1d]">I2C0_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[1e]">I2C1_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[26]">I2S_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[24]">LCD_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[25]">PDMA_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[27]">PDWU_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[11]">PWM0_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[12]">PWM1_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[2a]">RTC_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[30]">Reset_Handler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[20]">SC0_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[21]">SC1_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[1f]">SC2_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[19]">SPI0_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[1a]">SPI1_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[1b]">SPI2_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[2b]">SystemInit</a> from system_nano1xx.o(.text) referenced from startup_nano1xx.o(.text)
 <LI><a href="#[23]">TK_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[13]">TMR0_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[14]">TMR1_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[15]">TMR2_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[16]">TMR3_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[17]">UART0_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[18]">UART1_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[22]">USBD_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[c]">WDT_IRQHandler</a> from startup_nano1xx.o(.text) referenced from startup_nano1xx.o(RESET)
 <LI><a href="#[31]">__main</a> from __main.o(!!!main) referenced from startup_nano1xx.o(.text)
 <LI><a href="#[2e]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[2f]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[2d]">fputc</a> from nano1xx_retarget.o(.text) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[31]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[33]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[35]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[bf]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[c0]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[36]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[c1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[b0]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[37]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[38]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[3a]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[3c]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[44]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[c2]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[c3]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[3e]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[c4]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[c5]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[c6]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[c7]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[40]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[c8]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[c9]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[ca]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[cb]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[cc]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[cd]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[ce]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[cf]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[d0]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[d1]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[d2]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[d3]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[d4]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[d5]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[d6]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[49]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[d7]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[d8]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[d9]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[da]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[db]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[dc]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[34]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[dd]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[41]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[43]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[de]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[45]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1564 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; rak_send_data &rArr; send_data &rArr; RAK_SendCMD &rArr; spi_send_head
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[df]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[bd]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[48]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[e0]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[4a]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[30]"></a>Reset_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))

<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>GPABC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>GPDEF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>HIRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PDWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_nano1xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4c]"></a>GPIO_EnableInt</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, nano1xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[4e]"></a>GPIO_DisableInt</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nano1xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[50]"></a>GPIO_EnableEINT0</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nano1xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[51]"></a>GPIO_DisableEINT0</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nano1xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[52]"></a>GPIO_EnableEINT1</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nano1xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[53]"></a>GPIO_DisableEINT1</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nano1xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pull_gpio
</UL>

<P><STRONG><a name="[54]"></a>SYS_SelectHCLKSource</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, nano1xx_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SYS_SelectHCLKSource &rArr; SystemCoreClockUpdate &rArr; SysGet_HCLKFreq &rArr; SysGet_PLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_InitChipClock
</UL>

<P><STRONG><a name="[e2]"></a>SYS_SetUpPowerDown</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, nano1xx_sys.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>SYS_GetPLLClockFreq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, nano1xx_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SYS_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetUartClk
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetSourceClockFreq
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetHCLKFreq
</UL>

<P><STRONG><a name="[58]"></a>SYS_GetHCLKFreq</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, nano1xx_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SYS_GetHCLKFreq &rArr; SYS_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetPLLClockFreq
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetSourceClockFreq
</UL>

<P><STRONG><a name="[59]"></a>SYS_InitChipClock</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, nano1xx_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SYS_InitChipClock &rArr; SYS_SelectHCLKSource &rArr; SystemCoreClockUpdate &rArr; SysGet_HCLKFreq &rArr; SysGet_PLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SelectHCLKSource
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Config
</UL>

<P><STRONG><a name="[5a]"></a>SYS_Delay</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nano1xx_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYS_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_SendCMD
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_sys_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Target
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_open_socket
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wifi_module
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_read_data
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_read_status
</UL>

<P><STRONG><a name="[82]"></a>SPI_Init</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, nano1xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
</UL>

<P><STRONG><a name="[e3]"></a>SPI_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, nano1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>SPI_Open</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, nano1xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
</UL>

<P><STRONG><a name="[5b]"></a>SPI_Close</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nano1xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[e4]"></a>SPI_SetBitLength</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nano1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>SPI_SetSuspendCycle</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, nano1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>SPI_GetSourceClockFreq</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, nano1xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_GetSourceClockFreq &rArr; SYS_GetHCLKFreq &rArr; SYS_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetHCLKFreq
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetClock2Freq
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetClock1Freq
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetClockFreq
</UL>

<P><STRONG><a name="[5e]"></a>SPI_SetClockFreq</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, nano1xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI_SetClockFreq &rArr; SPI_GetSourceClockFreq &rArr; SYS_GetHCLKFreq &rArr; SYS_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetSourceClockFreq
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
</UL>

<P><STRONG><a name="[5f]"></a>SPI_GetClock1Freq</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nano1xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetSourceClockFreq
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[60]"></a>SPI_GetClock2Freq</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nano1xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetSourceClockFreq
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[61]"></a>SPI_EnableInt</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, nano1xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[63]"></a>SPI_DisableInt</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, nano1xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[e6]"></a>SPI_SingleRead</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nano1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>SPI_SingleWrite</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nano1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>SPI_DumpRxRegister</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nano1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>SPI_SetTxRegister</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nano1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>SPI_SetTxPDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nano1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>SPI_SetRxPDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nano1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>SPI_Enable3WireStartInt</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, nano1xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>

<P><STRONG><a name="[66]"></a>SPI_Disable3WireStartInt</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, nano1xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[ec]"></a>SPI_WakeupConfigure</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nano1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>SPI_SetFIFOMode</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, nano1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>SPI_FIFOWrite8</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nano1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>SPI_FIFOWrite16</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nano1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>SPI_FIFOWrite32</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nano1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>SPI_FIFORead8</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, nano1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>SPI_FIFORead16</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nano1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>SPI_FIFORead32</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nano1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>SPI_FIFOReadWrite8</STRONG> (Thumb, 156 bytes, Stack size 36 bytes, nano1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>SPI_FIFOReadWrite16</STRONG> (Thumb, 170 bytes, Stack size 36 bytes, nano1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>SPI_FIFOReadWrite32</STRONG> (Thumb, 158 bytes, Stack size 36 bytes, nano1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>UART_GetUartClk</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, nano1xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_GetUartClk &rArr; SYS_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetPLLClockFreq
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[f7]"></a>UART_SetRTS</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, nano1xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>UART_Init</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, nano1xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_Init &rArr; UART_GetUartClk &rArr; SYS_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetUartClk
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
</UL>

<P><STRONG><a name="[69]"></a>UART_DeInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, nano1xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[6b]"></a>UART_EnableInt</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nano1xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[6d]"></a>UART_DisableInt</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nano1xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[f8]"></a>UART_ClearIntFlag</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, nano1xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>UART_GetIntStatus</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, nano1xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>DrvUART_GetCTSInfo</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nano1xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>UART_Read</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nano1xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>UART_Write</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nano1xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>UART_SetFnIRDA</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nano1xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>UART_SetFnLIN</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, nano1xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>UART_SetFnRS485</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, nano1xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>SendChar_ToUART</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nano1xx_retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[6e]"></a>SendChar</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, nano1xx_retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>

<P><STRONG><a name="[72]"></a>GetChar</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nano1xx_retarget.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[100]"></a>kbhit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nano1xx_retarget.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>IsDebugFifoEmpty</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nano1xx_retarget.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nano1xx_retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[2d]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, nano1xx_retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>fgetc</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, nano1xx_retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
</UL>

<P><STRONG><a name="[b7]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nano1xx_retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[76]"></a>SysInit_PinFunc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_nano1xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[73]"></a>SysGet_PLLClockFreq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, system_nano1xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysGet_PLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGet_HCLKFreq
</UL>

<P><STRONG><a name="[74]"></a>SysGet_HCLKFreq</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, system_nano1xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysGet_HCLKFreq &rArr; SysGet_PLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGet_PLLClockFreq
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[55]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_nano1xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SystemCoreClockUpdate &rArr; SysGet_HCLKFreq &rArr; SysGet_PLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGet_HCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit_Clock
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SelectHCLKSource
</UL>

<P><STRONG><a name="[75]"></a>SysInit_Clock</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, system_nano1xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SysInit_Clock &rArr; SystemCoreClockUpdate &rArr; SysGet_HCLKFreq &rArr; SysGet_PLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2b]"></a>SystemInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_nano1xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SystemInit &rArr; SysInit_Clock &rArr; SystemCoreClockUpdate &rArr; SysGet_HCLKFreq &rArr; SysGet_PLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit_Clock
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit_PinFunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nano1xx.o(.text)
</UL>
<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, example.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1564 + Unknown Stack Size
<LI>Call Chain = main &rArr; rak_send_data &rArr; send_data &rArr; RAK_SendCMD &rArr; spi_send_head
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_send_data
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_read_packet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_open_socket
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_clearPktIrq
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_checkPktIrq
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wifi_module
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[7e]"></a>GPIO_Config</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[81]"></a>SPI_Config</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, hal_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI_Config &rArr; SPI_SetClockFreq &rArr; SPI_GetSourceClockFreq &rArr; SYS_GetHCLKFreq &rArr; SYS_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetClockFreq
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[84]"></a>UART1_Init</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, hal_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART1_Init &rArr; UART_Init &rArr; UART_GetUartClk &rArr; SYS_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[85]"></a>SYS_Config</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, hal_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SYS_Config &rArr; SYS_InitChipClock &rArr; SYS_SelectHCLKSource &rArr; SystemCoreClockUpdate &rArr; SysGet_HCLKFreq &rArr; SysGet_PLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_InitChipClock
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[86]"></a>pull_gpio</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, hal_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DisablePullup
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DisableEINT1
</UL>

<P><STRONG><a name="[88]"></a>Reset_Target</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hal_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Reset_Target &rArr; SYS_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[77]"></a>hal_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hal_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hal_init &rArr; SYS_Config &rArr; SYS_InitChipClock &rArr; SYS_SelectHCLKSource &rArr; SystemCoreClockUpdate &rArr; SysGet_HCLKFreq &rArr; SysGet_PLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Target
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Config
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>init_wifi_module</STRONG> (Thumb, 490 bytes, Stack size 16 bytes, init_wifi_module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = init_wifi_module &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_sys_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_set_psk
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_set_ipstatic
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_ipconfig_dhcp
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_init_struct
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_get_version
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_connect
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_read_packet
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_clearPktIrq
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_checkPktIrq
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Delay
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>spi_Read</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rak411_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_recv_data
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DataLen
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_status
</UL>

<P><STRONG><a name="[95]"></a>spi_send</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rak411_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_head
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_data
</UL>

<P><STRONG><a name="[91]"></a>get_DataLen</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, rak411_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = get_DataLen
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_sys_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_read_data
</UL>

<P><STRONG><a name="[93]"></a>spi_recv_data</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, rak411_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = spi_recv_data
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_sys_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_read_data
</UL>

<P><STRONG><a name="[94]"></a>spi_send_data</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rak411_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_send_data
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_SendCMD
</UL>

<P><STRONG><a name="[96]"></a>spi_send_head</STRONG> (Thumb, 70 bytes, Stack size 28 bytes, rak411_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = spi_send_head
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_SendCMD
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_sys_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_read_data
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_read_status
</UL>

<P><STRONG><a name="[97]"></a>RAK_SendCMD</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, rak411_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RAK_SendCMD &rArr; spi_send_head
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_head
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_data
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_set_psk
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_set_ipstatic
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_ipconfig_dhcp
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_get_version
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_connect
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_socket
</UL>

<P><STRONG><a name="[98]"></a>rak_asciiDotAddressTouint32</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, rak_config_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rak_asciiDotAddressTouint32 &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_init_struct
</UL>

<P><STRONG><a name="[8a]"></a>rak_init_struct</STRONG> (Thumb, 512 bytes, Stack size 8 bytes, rak_config_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rak_init_struct &rArr; rak_asciiDotAddressTouint32 &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_asciiDotAddressTouint32
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wifi_module
</UL>

<P><STRONG><a name="[102]"></a>rak_bytes4ToUint32</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rak_config_init.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>rak_bytes4RToUint32</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rak_config_init.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>rak_asciiDotAddressTo4Bytes</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, rak_config_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[8e]"></a>rak_connect</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rak_spi_connect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = rak_connect &rArr; RAK_SendCMD &rArr; spi_send_head
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_SendCMD
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wifi_module
</UL>

<P><STRONG><a name="[8c]"></a>rak_get_version</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rak_spi_get_version.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = rak_get_version &rArr; RAK_SendCMD &rArr; spi_send_head
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_SendCMD
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wifi_module
</UL>

<P><STRONG><a name="[9d]"></a>rak_checkRecvFullIrq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rak_spi_interrupt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_intHandler
</UL>

<P><STRONG><a name="[7c]"></a>rak_clearPktIrq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rak_spi_interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_open_socket
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wifi_module
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_checkDataFullIrq
</UL>

<P><STRONG><a name="[9f]"></a>rak_checkDataFullIrq</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rak_spi_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rak_checkDataFullIrq &rArr; rak_intHandler &rArr; rak_read_status &rArr; spi_send_head
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_clearPktIrq
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_intHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[7a]"></a>rak_checkPktIrq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rak_spi_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rak_checkPktIrq &rArr; rak_intHandler &rArr; rak_read_status &rArr; spi_send_head
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_intHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_open_socket
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wifi_module
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>rak_checkUpgradIrq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rak_spi_interrupt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_intHandler
</UL>

<P><STRONG><a name="[9e]"></a>rak_intHandler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rak_spi_interrupt_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rak_intHandler &rArr; rak_read_status &rArr; spi_send_head
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_checkPktIrq
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_checkUpgradIrq
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_checkDataFullIrq
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_checkRecvFullIrq
</UL>

<P><STRONG><a name="[90]"></a>rak_ipconfig_dhcp</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, rak_spi_ipconfig_dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = rak_ipconfig_dhcp &rArr; RAK_SendCMD &rArr; spi_send_head
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_SendCMD
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wifi_module
</UL>

<P><STRONG><a name="[a2]"></a>rak_socket</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, rak_spi_open_socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = rak_socket &rArr; RAK_SendCMD &rArr; spi_send_head
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_SendCMD
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_open_socket
</UL>

<P><STRONG><a name="[79]"></a>rak_open_socket</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, rak_spi_open_socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = rak_open_socket &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_read_packet
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_clearPktIrq
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_checkPktIrq
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Delay
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>rak_set_psk</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rak_spi_psk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = rak_set_psk &rArr; RAK_SendCMD &rArr; spi_send_head
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_SendCMD
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wifi_module
</UL>

<P><STRONG><a name="[a4]"></a>rak_read_data</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, rak_spi_read_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rak_read_data &rArr; spi_send_head
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_head
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_recv_data
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DataLen
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_read_packet
</UL>

<P><STRONG><a name="[7b]"></a>rak_read_packet</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rak_spi_read_packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rak_read_packet &rArr; rak_read_data &rArr; spi_send_head
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_open_socket
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wifi_module
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>get_status</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rak_spi_read_status.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_status
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_read_status
</UL>

<P><STRONG><a name="[a1]"></a>rak_read_status</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rak_spi_read_status.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rak_read_status &rArr; spi_send_head
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_head
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Delay
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_intHandler
</UL>

<P><STRONG><a name="[a6]"></a>send_data</STRONG> (Thumb, 92 bytes, Stack size 1456 bytes, rak_spi_send_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1516<LI>Call Chain = send_data &rArr; RAK_SendCMD &rArr; spi_send_head
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_SendCMD
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_checkDataFullIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_send_data
</UL>

<P><STRONG><a name="[7d]"></a>rak_send_data</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, rak_spi_send_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1556<LI>Call Chain = rak_send_data &rArr; send_data &rArr; RAK_SendCMD &rArr; spi_send_head
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>rak_set_ipstatic</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rak_spi_set_ipstatic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = rak_set_ipstatic &rArr; RAK_SendCMD &rArr; spi_send_head
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_SendCMD
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wifi_module
</UL>

<P><STRONG><a name="[8b]"></a>rak_sys_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rak_spi_sys_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rak_sys_init &rArr; spi_send_head
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_head
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_recv_data
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DataLen
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wifi_module
</UL>

<P><STRONG><a name="[89]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_open_socket
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wifi_module
</UL>

<P><STRONG><a name="[a9]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[39]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[104]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>__printf</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, __printf_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[99]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_asciiDotAddressTo4Bytes
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_asciiDotAddressTouint32
</UL>

<P><STRONG><a name="[9b]"></a>strcpy</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_init_struct
</UL>

<P><STRONG><a name="[9a]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_asciiDotAddressTo4Bytes
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_asciiDotAddressTouint32
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[105]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGet_HCLKFreq
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGet_PLLClockFreq
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetUartClk
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetClock2Freq
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetClock1Freq
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetClockFreq
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Delay
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetHCLKFreq
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetPLLClockFreq
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[10c]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[b4]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[3b]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[3d]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[a8]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[b2]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[10e]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[10f]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[b6]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[b9]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[42]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3f]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[ba]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[47]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[be]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[4b]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[110]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rak_spi_open_socket.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_socket
</UL>

<P><STRONG><a name="[112]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[2e]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4d]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nano1xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableEINT1
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableEINT0
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableInt
</UL>

<P><STRONG><a name="[4f]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nano1xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DisableEINT1
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DisableEINT0
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DisableInt
</UL>

<P><STRONG><a name="[65]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, nano1xx_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Enable3WireStartInt
</UL>

<P><STRONG><a name="[62]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nano1xx_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Enable3WireStartInt
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EnableInt
</UL>

<P><STRONG><a name="[5c]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nano1xx_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Disable3WireStartInt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DisableInt
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Close
</UL>

<P><STRONG><a name="[6c]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nano1xx_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
</UL>

<P><STRONG><a name="[6a]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nano1xx_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableInt
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
</UL>

<P><STRONG><a name="[7f]"></a>GPIO_Open</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>

<P><STRONG><a name="[80]"></a>GPIO_ClrBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Target
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>

<P><STRONG><a name="[87]"></a>GPIO_DisablePullup</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_init.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pull_gpio
</UL>

<P><STRONG><a name="[2f]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[bc]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[b5]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[ab]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[aa]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[ac]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<HR></body></html>
